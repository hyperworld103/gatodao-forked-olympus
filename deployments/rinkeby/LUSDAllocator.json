{
  "address": "0xaBF0Bd70d1c197101a474F8F22A1C1c374B8B45B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lusdTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lqtyTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stabilityPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lqtyStaking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_frontEndAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPulled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipPushed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frontEndAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getETHRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLQTYRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lqtyTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lusdTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "pushManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_frontEndAddress",
          "type": "address"
        }
      ],
      "name": "setFrontEndAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmountDeployed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueDeployed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd559f629a2d210028cafdf8775adf77cd2ab04cb65ac706f22ba018c684b3db3",
  "receipt": {
    "to": null,
    "from": "0x8c4c12E63FCd9A9930C7d305Fc87193cF46B5832",
    "contractAddress": "0xaBF0Bd70d1c197101a474F8F22A1C1c374B8B45B",
    "transactionIndex": 4,
    "gasUsed": "1375869",
    "logsBloom": "0x
    "blockHash": "0x942b41e0887a5ee8c5cab107c66e091a8b5c5a0001351cbca6f7547c3ee83df6",
    "transactionHash": "0xd559f629a2d210028cafdf8775adf77cd2ab04cb65ac706f22ba018c684b3db3",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 9848873,
        "transactionHash": "0xd559f629a2d210028cafdf8775adf77cd2ab04cb65ac706f22ba018c684b3db3",
        "address": "0xaBF0Bd70d1c197101a474F8F22A1C1c374B8B45B",
        "topics": [
          "0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c4c12e63fcd9a9930c7d305fc87193cf46b5832"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x942b41e0887a5ee8c5cab107c66e091a8b5c5a0001351cbca6f7547c3ee83df6"
      }
    ],
    "blockNumber": 9848873,
    "cumulativeGasUsed": "5286911",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b28Da6b497c984ed48b0d69f1DF4010071fC78e",
    "0xaf844BBaD90fB27ae949376338F7c9DA1251acFf",
    "0xf8A1aA1c34970aCE24041ef038A442732d942b89",
    "0xFd0dB2BA8BEaC72d45f12A76f40c345BBf5f6F8d",
    "0x35D3293EA6dD210b8Ca25668ae266ca4C834Ea1b",
    "0x0000000000000000000000000000000000000000",
    "0xc778417E063141139Fce010982780140Aa0cD5Ab"
  ],
  "solcInputHash": "308bdccd55d611a99abade2132ab32f3",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lusdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lqtyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lqtyStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_frontEndAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frontEndAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLQTYRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lqtyTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lusdTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frontEndAddress\",\"type\":\"address\"}],\"name\":\"setFrontEndAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256)\":{\"params\":{\"amount\":\"uint\",\"token\":\"address\"}},\"getETHRewards()\":{\"returns\":{\"_0\":\"uint\"}},\"getLQTYRewards()\":{\"returns\":{\"_0\":\"uint\"}},\"setFrontEndAddress(address)\":{\"params\":{\"_frontEndAddress\":\"address\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"uint\",\"token\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address,uint256)\":{\"notice\":\"withdraws asset from treasury, deposits asset into stability pool\"},\"getETHRewards()\":{\"notice\":\"get ETH rewards from SP\"},\"getLQTYRewards()\":{\"notice\":\"get LQTY rewards from SP\"},\"harvest()\":{\"notice\":\"claims LQTY & ETH Rewards 1.  Harvest from LUSD StabilityPool to get ETH+LQTY rewards 2.  Stake LQTY rewards from #1.  This txn will also give out any outstanding ETH+LUSD rewards from prior staking 3.  Deposit LUSD from #2 into StabilityPool 4.  Move ETH from #1 and #2 to treasury \"},\"setFrontEndAddress(address)\":{\"notice\":\"setsFrontEndAddress for Stability pool rewards\"},\"withdraw(address,uint256)\":{\"notice\":\"withdraws from stability pool, and deposits asset into treasury\"}},\"notice\":\"Contract deploys reserves from treasury into the Aave lending pool,  earning interest and $stkAAVE.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/allocators/LUSDAllocator.sol\":\"LUSDAllocator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/allocators/LUSDAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IAllocator.sol\\\";\\n\\nimport \\\"../types/Ownable.sol\\\";\\n\\n//https://etherscan.io/address/0x66017D22b0f8556afDd19FC67041899Eb65a21bb\\n/*\\n * The Stability Pool holds LUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its LUSD debt gets offset with\\n * LUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of LUSD tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a LUSD loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total LUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- LQTY ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An LQTY issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued LQTY in proportion to the deposit as a share of total deposits. The LQTY earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Functions ---\\n    /*\\n     * Initial checks:\\n     * - Frontend is registered or zero address\\n     * - Sender is not a registered frontend\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (LQTY, ETH) to depositor\\n     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint256 _amount, address _frontEndTag) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (LQTY, ETH) to depositor\\n     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some ETH gain\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's LQTY gain to  depositor\\n     * - Sends all tagged front end's LQTY gain to the tagged front end\\n     * - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend (sender) not already registered\\n     * - User (sender) has no deposit\\n     * - _kickbackRate is in the range [0, 100%]\\n     * ---\\n     * Front end makes a one-time selection of kickback rate upon registering\\n     */\\n    function registerFrontEnd(uint256 _kickbackRate) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the LUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like ETH received from a self-destruct.\\n     */\\n    function getETH() external view returns (uint256);\\n\\n    /*\\n     * Returns LUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalLUSDDeposits() external view returns (uint256);\\n\\n    /*\\n     * Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorETHGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Calculate the LQTY gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorLQTYGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the LQTY gain earned by the front end.\\n     */\\n    function getFrontEndLQTYGain(address _frontEnd) external view returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedLUSDDeposit(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the front end's compounded stake.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint256);\\n}\\n\\n//\\ninterface ILQTYStaking {\\n    /*\\n        sends _LQTYAmount from the caller to the staking contract, and increases their stake.\\n        If the caller already has a non-zero stake, it pays out their accumulated ETH and LUSD gains from staking.\\n    */\\n    function stake(uint256 _LQTYamount) external;\\n\\n    /**\\n        reduces the caller\\u2019s stake by _LQTYamount, up to a maximum of their entire stake. \\n        It pays out their accumulated ETH and LUSD gains from staking.\\n    */\\n    function unstake(uint256 _LQTYamount) external;\\n\\n    function getPendingETHGain(address _user) external view returns (uint);\\n\\n    function getPendingLUSDGain(address _user) external view returns (uint);\\n}\\n\\n/**\\n *  Contract deploys reserves from treasury into the Aave lending pool,\\n *  earning interest and $stkAAVE.\\n */\\n\\ncontract LUSDAllocator is Ownable {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    IStabilityPool immutable lusdStabilityPool;\\n    ILQTYStaking immutable lqtyStaking;\\n    ITreasury immutable treasury; // Olympus Treasury\\n    IERC20 immutable weth;  // WETH9 address (0xb603cEa165119701B58D56d10D2060fBFB3efad8)\\n\\n    // TODO(zx): I don't think we care about front-end because we're our own frontend.\\n    address public frontEndAddress; // frontEndAddress for potential liquity rewards\\n    address public lusdTokenAddress; // LUSD Address (0x5f98805A4E8be255a32880FDeC7F6728C6568bA0)\\n    address public lqtyTokenAddress; // LQTY Address (0x6DEA81C8171D0bA574754EF6F8b412F2Ed88c54D)  from https://github.com/liquity/dev/blob/a12f8b737d765bfee6e1bfcf8bf7ef155c814e1e/packages/contracts/mainnetDeployment/realDeploymentOutput/output14.txt#L61\\n\\n    uint256 public totalValueDeployed; // total RFV deployed into lending pool\\n    uint256 public totalAmountDeployed; // Total amount of tokens deployed\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        address _treasury,\\n        address _lusdTokenAddress,\\n        address _lqtyTokenAddress,\\n        address _stabilityPool,\\n        address _lqtyStaking,\\n        address _frontEndAddress,\\n        address _wethAddress\\n    ) {\\n        require(_treasury != address(0), \\\"treasury address cannot be 0x0\\\");\\n        treasury = ITreasury(_treasury);\\n\\n        require(_lusdTokenAddress != address(0), \\\"LUSD token address cannot be 0x0\\\");\\n        lusdTokenAddress = _lusdTokenAddress;\\n\\n        require(_lqtyTokenAddress != address(0), \\\"LQTY token address cannot be 0x0\\\");\\n        lqtyTokenAddress = _lqtyTokenAddress;\\n\\n        require(_stabilityPool != address(0), \\\"stabilityPool address cannot be 0x0\\\");\\n        lusdStabilityPool = IStabilityPool(_stabilityPool);\\n\\n        require(_lqtyStaking != address(0), \\\"LQTY staking address cannot be 0x0\\\");\\n        lqtyStaking = ILQTYStaking(_lqtyStaking);\\n\\n        frontEndAddress = _frontEndAddress; // address can be 0\\n\\n        require(_wethAddress != address(0), \\\"WETH token address cannot be 0x0\\\");\\n        weth = IERC20(_wethAddress);\\n    }\\n\\n    /* ======== OPEN FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice claims LQTY & ETH Rewards\\n\\n        1.  Harvest from LUSD StabilityPool to get ETH+LQTY rewards\\n        2.  Stake LQTY rewards from #1.  This txn will also give out any outstanding ETH+LUSD rewards from prior staking\\n        3.  Deposit LUSD from #2 into StabilityPool\\n        4.  Move ETH from #1 and #2 to treasury \\n     */\\n    function harvest() public returns (bool) {\\n        uint256 stabilityPoolEthRewards = getETHRewards();\\n        uint256 stabilityPoolLqtyRewards = getLQTYRewards();\\n\\n        if (stabilityPoolEthRewards == 0 && stabilityPoolLqtyRewards == 0) {\\n            return false;\\n        }\\n        // 1.  Harvest from LUSD StabilityPool to get ETH+LQTY rewards\\n        lusdStabilityPool.withdrawFromSP(0);  //Passing 0 b/c we don't want to withdraw from the pool but harvest - see https://discord.com/channels/700620821198143498/818895484956835912/908031137010581594\\n\\n        // 2.  Stake LQTY rewards from #1.  This txn will also give out any outstanding ETH+LUSD rewards from prior staking\\n        uint256 balanceLqty = IERC20(lqtyTokenAddress).balanceOf(address(this)); // LQTY balance received from stability pool\\n        \\n        uint stakingEthRewards = 0;\\n        uint stakingLUSDRewards = 0;\\n        if (balanceLqty > 0) {\\n            stakingEthRewards = lqtyStaking.getPendingETHGain(address(this));\\n            stakingLUSDRewards = lqtyStaking.getPendingLUSDGain(address(this));\\n            //Stake\\n            IERC20(lqtyTokenAddress).approve(address(lqtyStaking), balanceLqty); // approve to deposit into stability pool\\n            lqtyStaking.stake(balanceLqty); //Stake LQTY, also receives any prior ETH+LUSD rewards from prior staking TODO need to deposit this LUSD\\n        }\\n\\n        // 3.  Deposit LUSD from #2 into StabilityPool\\n        if (stakingLUSDRewards > 0) {\\n            IERC20(lusdTokenAddress).approve(address(lusdStabilityPool), stakingLUSDRewards); // approve to deposit into stability pool\\n            lusdStabilityPool.provideToSP(stakingLUSDRewards, frontEndAddress);\\n        }\\n\\n\\n        // 4.  Move ETH from #1 and #2 to treasury \\n       if (stabilityPoolEthRewards > 0 || stakingEthRewards > 0) {            \\n            uint256 totalEthRewards = stabilityPoolEthRewards + stakingEthRewards;            \\n            weth.approve(address(treasury), totalEthRewards);\\n            weth.safeTransferFrom(address(this), address(treasury), totalEthRewards);\\n       }\\n\\n        return true;\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice withdraws asset from treasury, deposits asset into stability pool\\n     *  @param token address\\n     *  @param amount uint\\n     */\\n    function deposit(address token, uint256 amount) external onlyOwner {\\n        require(token == lusdTokenAddress, \\\"token address does not match LUSD token\\\");\\n        treasury.manage(token, amount); // retrieve amount of asset from treasury\\n\\n        IERC20(token).approve(address(lusdStabilityPool), amount); // approve to deposit into stability pool\\n        lusdStabilityPool.provideToSP(amount, frontEndAddress); //s either a front-end address OR 0x0\\n\\n        uint256 value = treasury.tokenValue(token, amount); // treasury RFV calculator\\n        accountingFor(amount, value, true); // account for deposit\\n    }\\n\\n    /**\\n     *  @notice withdraws from stability pool, and deposits asset into treasury\\n     *  @param token address\\n     *  @param amount uint\\n     */\\n    function withdraw(address token, uint256 amount) public onlyOwner {\\n        require(token == lusdTokenAddress, \\\"token address does not match LUSD token\\\");\\n\\n        lusdStabilityPool.withdrawFromSP(amount); // withdraw from SP\\n\\n        uint256 balance = IERC20(token).balanceOf(address(this)); // balance of asset received from stability pool\\n        uint256 value = treasury.tokenValue(token, balance); // treasury RFV calculator\\n\\n        accountingFor(balance, value, false); // account for withdrawal\\n\\n        IERC20(token).approve(address(treasury), balance); // approve to deposit asset into treasury\\n        treasury.deposit(balance, token, value); // deposit using value as profit so no OHM is minted\\n    }\\n\\n    /**\\n     *  @notice setsFrontEndAddress for Stability pool rewards\\n     *  @param _frontEndAddress address\\n     */\\n    function setFrontEndAddress(address _frontEndAddress) external onlyOwner {\\n        frontEndAddress = _frontEndAddress;\\n    }\\n\\n    /* ======== INTERNAL FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice accounting of deposits/withdrawals of assets\\n     *  @param amount uint\\n     *  @param value uint\\n     *  @param add bool\\n     */\\n    function accountingFor(\\n        uint256 amount,\\n        uint256 value,\\n        bool add\\n    ) internal {\\n        if (add) {\\n            totalAmountDeployed = totalAmountDeployed.add(amount);\\n            totalValueDeployed = totalValueDeployed.add(value); // track total value allocated into pools\\n        } else {\\n            // track total value allocated into pools\\n            if (amount < totalAmountDeployed) {\\n                totalAmountDeployed = totalAmountDeployed.sub(amount);\\n            } else {\\n                totalAmountDeployed = 0;\\n            }\\n\\n            if (value < totalValueDeployed) {\\n                totalValueDeployed = totalValueDeployed.sub(value);\\n            } else {\\n                totalValueDeployed = 0;\\n            }\\n        }\\n    }\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice get ETH rewards from SP\\n     *  @return uint\\n     */\\n    function getETHRewards() public view returns (uint256) {\\n        return lusdStabilityPool.getDepositorETHGain(address(this));\\n    }\\n\\n    /**\\n     *  @notice get LQTY rewards from SP\\n     *  @return uint\\n     */\\n    function getLQTYRewards() public view returns (uint256) {\\n        return lusdStabilityPool.getDepositorLQTYGain(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x76da30b066df32a44ed475374b62c7a665c10fad9b427d641cbe88ba25ef16c4\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\ninterface IAllocator {\\n    // Should have deposit/withdraw methods (interfaces aren't standardized)\\n    function harvest() external;\\n}\\n\",\"keccak256\":\"0xe054f3bb3b75620b7d411043bc86a92d8ae76b7233e24300f630c33e733432a3\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n\\n    function renounceManagement() external;\\n\\n    function pushManagement(address newOwner_) external;\\n\\n    function pullManagement() external;\\n}\\n\",\"keccak256\":\"0x29d92f94f4517d948d3a314e89008ae96e189cc21d410d477ddfe3766e5d665a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): replace with OZ implementation.\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n    //     require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    //     return _functionCallWithValue(target, data, value, errorMessage);\\n    // }\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n  /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function addressToString(address _address) internal pure returns(string memory) {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _addr = new bytes(42);\\n\\n        _addr[0] = '0';\\n        _addr[1] = 'x';\\n\\n        for(uint256 i = 0; i < 20; i++) {\\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n\\n        return string(_addr);\\n\\n    }\\n}\",\"keccak256\":\"0x6f876c8caf225f86ec550117c4b1a6586353f7af3a1147355caf0016dc1672c4\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\",\"keccak256\":\"0xbdd4f99088de7c23383b043055646de013b1312166a9bfa05e3995cdcf7ae022\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x45cfc2aa9d85df2add98d4e899d834c646e8ce7001b00ead65f07dbefbcebeef\",\"license\":\"AGPL-3.0\"},\"contracts/types/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\nabstract contract Ownable is IOwnable {\\n\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        _owner = msg.sender;\\n        emit OwnershipPushed( address(0), _owner );\\n    }\\n\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyOwner() {\\n        emit OwnershipPulled( _owner, address(0) );\\n        _owner = address(0);\\n        _newOwner = address(0);\\n    }\\n\\n    function pushManagement( address newOwner_ ) public virtual override onlyOwner() {\\n        emit OwnershipPushed( _owner, newOwner_ );\\n        _newOwner = newOwner_;\\n    }\\n    \\n    function pullManagement() public virtual override {\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled( _owner, _newOwner );\\n        _owner = _newOwner;\\n        _newOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xfe6b742e3ef90f8c50b41d307e0b8928db8eda36bf5dfa9c12e493f17db19f43\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f45760003560e01c806378289ed211610097578063987f56ff11610066578063987f56ff146101d7578063b7e78648146101df578063c901761d14610205578063f3fef3a31461020d576100f4565b806378289ed2146101a557806378767d05146101bf578063817f6481146101c75780638da5cb5b146101cf576100f4565b80634641257d116100d35780634641257d1461012f57806346f68ee91461014b57806347e7ef24146101715780635a96ac0a1461019d576100f4565b806202fcd3146100f9578063089208d81461011d5780631d2528fc14610127575b600080fd5b610101610239565b604080516001600160a01b039092168252519081900360200190f35b610125610248565b005b6101016102fd565b61013761030c565b604080519115158252519081900360200190f35b6101256004803603602081101561016157600080fd5b50356001600160a01b0316610911565b6101256004803603604081101561018757600080fd5b506001600160a01b0381351690602001356109cb565b610125610cec565b6101ad610d99565b60408051918252519081900360200190f35b6101ad610e39565b610101610ea8565b610101610eb7565b6101ad610ec6565b610125600480360360208110156101f557600080fd5b50356001600160a01b0316610ecc565b6101ad610f4d565b6101256004803603604081101561022357600080fd5b506001600160a01b038135169060200135610f53565b6003546001600160a01b031681565b6000546001600160a01b031633146102a7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d908390a3600080546001600160a01b0319908116909155600180549091169055565b6002546001600160a01b031681565b600080610317610d99565b90506000610323610e39565b905081158015610331575080155b156103415760009250505061090e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e54bf9560006040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156103a857600080fd5b505af11580156103bc573d6000803e3d6000fd5b505060048054604080516370a0823160e01b8152309381019390935251600094506001600160a01b0390911692506370a0823191602480820192602092909190829003018186803b15801561041057600080fd5b505afa158015610424573d6000803e3d6000fd5b505050506040513d602081101561043a57600080fd5b5051905060008082156106975760408051638b9345ad60e01b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691638b9345ad916024808301926020929190829003018186803b1580156104ad57600080fd5b505afa1580156104c1573d6000803e3d6000fd5b505050506040513d60208110156104d757600080fd5b50516040805163026faad760e61b815230600482015290519193506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639beab5c091602480820192602092909190829003018186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d602081101561056d57600080fd5b5051600480546040805163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169482019490945260248101889052905193945091169163095ea7b3916044808201926020929091908290030181600087803b1580156105ea57600080fd5b505af11580156105fe573d6000803e3d6000fd5b505050506040513d602081101561061457600080fd5b50506040805163534a7e1d60e11b81526004810185905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a694fc3a91602480830192600092919082900301818387803b15801561067e57600080fd5b505af1158015610692573d6000803e3d6000fd5b505050505b80156107ce576003546040805163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561071357600080fd5b505af1158015610727573d6000803e3d6000fd5b505050506040513d602081101561073d57600080fd5b505060025460408051635f788d6560e01b8152600481018490526001600160a01b03928316602482015290517f000000000000000000000000000000000000000000000000000000000000000090921691635f788d659160448082019260009290919082900301818387803b1580156107b557600080fd5b505af11580156107c9573d6000803e3d6000fd5b505050505b60008511806107dd5750600082115b1561090457600082860190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561088057600080fd5b505af1158015610894573d6000803e3d6000fd5b505050506040513d60208110156108aa57600080fd5b5061090290506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016307f0000000000000000000000000000000000000000000000000000000000000000846112f9565b505b6001955050505050505b90565b6000546001600160a01b03163314610970576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610a2a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6003546001600160a01b03838116911614610a765760405162461bcd60e51b81526004018080602001828103825260278152602001806116426027913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630b0eee3083836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b50505050816001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610b7c57600080fd5b505af1158015610b90573d6000803e3d6000fd5b505050506040513d6020811015610ba657600080fd5b505060025460408051635f788d6560e01b8152600481018490526001600160a01b03928316602482015290517f000000000000000000000000000000000000000000000000000000000000000090921691635f788d659160448082019260009290919082900301818387803b158015610c1e57600080fd5b505af1158015610c32573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f182178384846040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015610cad57600080fd5b505afa158015610cc1573d6000803e3d6000fd5b505050506040513d6020811015610cd757600080fd5b50519050610ce782826001611479565b505050565b6001546001600160a01b03163314610d355760405162461bcd60e51b81526004018080602001828103825260228152602001806116206022913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663389e92a5306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e0857600080fd5b505afa158015610e1c573d6000803e3d6000fd5b505050506040513d6020811015610e3257600080fd5b5051905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f5f1595d306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e0857600080fd5b6004546001600160a01b031681565b6000546001600160a01b031690565b60065481565b6000546001600160a01b03163314610f2b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60055481565b6000546001600160a01b03163314610fb2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6003546001600160a01b03838116911614610ffe5760405162461bcd60e51b81526004018080602001828103825260278152602001806116426027913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e54bf95826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561106457600080fd5b505af1158015611078573d6000803e3d6000fd5b505050506000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156110cb57600080fd5b505afa1580156110df573d6000803e3d6000fd5b505050506040513d60208110156110f557600080fd5b50516040805163f182178360e01b81526001600160a01b0386811660048301526024820184905291519293506000927f00000000000000000000000000000000000000000000000000000000000000009092169163f182178391604480820192602092909190829003018186803b15801561116f57600080fd5b505afa158015611183573d6000803e3d6000fd5b505050506040513d602081101561119957600080fd5b505190506111a982826000611479565b836001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561122057600080fd5b505af1158015611234573d6000803e3d6000fd5b505050506040513d602081101561124a57600080fd5b50506040805163bc157ac160e01b8152600481018490526001600160a01b0386811660248301526044820184905291517f00000000000000000000000000000000000000000000000000000000000000009092169163bc157ac1916064808201926020929091908290030181600087803b1580156112c757600080fd5b505af11580156112db573d6000803e3d6000fd5b505050506040513d60208110156112f157600080fd5b505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b17815292518251600094606094938a169392918291908083835b602083106113935780518252601f199092019160209182019101611374565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146113f5576040519150601f19603f3d011682016040523d82523d6000602084013e6113fa565b606091505b5091509150818015611428575080511580611428575080806020019051602081101561142557600080fd5b50515b6112f1576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b80156114a45760065461148c90846114ea565b60065560055461149c90836114ea565b600555610ce7565b6006548310156114c3576006546114bb908461154b565b6006556114c9565b60006006555b6005548210156114e05760055461149c908361154b565b6000600555505050565b600082820183811015611544576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600061154483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156116175760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115dc5781810151838201526020016115c4565b50505050905090810190601f1680156116095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6c746f6b656e206164647265737320646f6573206e6f74206d61746368204c55534420746f6b656ea164736f6c6343000705000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256)": {
        "params": {
          "amount": "uint",
          "token": "address"
        }
      },
      "getETHRewards()": {
        "returns": {
          "_0": "uint"
        }
      },
      "getLQTYRewards()": {
        "returns": {
          "_0": "uint"
        }
      },
      "setFrontEndAddress(address)": {
        "params": {
          "_frontEndAddress": "address"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "uint",
          "token": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(address,uint256)": {
        "notice": "withdraws asset from treasury, deposits asset into stability pool"
      },
      "getETHRewards()": {
        "notice": "get ETH rewards from SP"
      },
      "getLQTYRewards()": {
        "notice": "get LQTY rewards from SP"
      },
      "harvest()": {
        "notice": "claims LQTY & ETH Rewards 1.  Harvest from LUSD StabilityPool to get ETH+LQTY rewards 2.  Stake LQTY rewards from #1.  This txn will also give out any outstanding ETH+LUSD rewards from prior staking 3.  Deposit LUSD from #2 into StabilityPool 4.  Move ETH from #1 and #2 to treasury "
      },
      "setFrontEndAddress(address)": {
        "notice": "setsFrontEndAddress for Stability pool rewards"
      },
      "withdraw(address,uint256)": {
        "notice": "withdraws from stability pool, and deposits asset into treasury"
      }
    },
    "notice": "Contract deploys reserves from treasury into the Aave lending pool,  earning interest and $stkAAVE.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19132,
        "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19134,
        "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
        "label": "_newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10473,
        "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
        "label": "frontEndAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10475,
        "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
        "label": "lusdTokenAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10477,
        "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
        "label": "lqtyTokenAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10479,
        "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
        "label": "totalValueDeployed",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10481,
        "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
        "label": "totalAmountDeployed",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}